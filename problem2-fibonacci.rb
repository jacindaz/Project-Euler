=begin
Each new term in the Fibonacci sequence is generated by
adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose
values do not exceed four million, find the sum of the
even-valued terms.
=end

#Solution #1 USING RECURSION--------------------------------------------------------------
# fib_array = [0, 1]
# first_num = 0
# second_num = 1
# def fibSeq (n)		#n is the highest value in the returned fib sequence
# 	first_num = second_num
# 	second_num = first_num + second_num
# 	return fibSeq(n)
# end

# puts fibSeq(8)


# #Solution #2------------------------------------------------------------------------------
# fibonacci_array = []
# fib_int1 = 0
# fib_int2 = 1
# fib_int_sum = 1

# while fib_int_sum < 4000000
# 	fib_int_sum = fib_int1 + fib_int2
# 	fib_int1 = fib_int2
# 	fib_int2 = fib_int_sum
# 	#puts fib_int_sum
# 	if fib_int_sum.even? == true
# 		fibonacci_array << fib_int_sum
# 	end
# end

# puts fibonacci_array

# #sum all even elements in the array
# #sum all elements in the array
# sum = 0
# fibonacci_array.each do |i|
# 	sum += i
# end

# puts "I am the final answer: #{sum}"


#Solution #3------------------------------------------------------------------------------
def fibonacciSummedEvens(n)
	fib_int1 = 0
	fib_int2 = 1
	fib_int_sum = 1
	sum_even_fibs = 0
	while (fib_int_sum < n) do						#do is optional
		fib_int_sum = fib_int1 + fib_int2
		fib_int1 = fib_int2
		fib_int2 = fib_int_sum
		#puts fib_int_sum
		if fib_int_sum.even? == true then			#then is optional
			sum_even_fibs += fib_int_sum
		end
	end
	puts sum_even_fibs
end
puts "I am solution 2"
fibonacciSummedEvens(4000000)
puts "End solution 2"











